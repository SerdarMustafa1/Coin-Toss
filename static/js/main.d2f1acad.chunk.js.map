{"version":3,"sources":["Coin.js","CoinContainer.js","helpers.js","App.js","serviceWorker.js","index.js"],"names":["Coin","react_default","a","createElement","className","src","this","props","info","imgSrc","alt","side","Component","CoinContainer","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","currCoin","nFlips","nHeads","nTails","handleClick","bind","assertThisInitialized","arr","newCoin","coins","Math","floor","random","length","setState","st","e","flipCoin","src_Coin_0","onClick","defaultProps","App","src_CoinContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+PAaeA,mLARb,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACdH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,KAAKC,MAAMC,KAAKC,OAAQC,IAAKJ,KAAKC,MAAMC,KAAKG,eAJxCC,aCCbC,cAOL,SAAAA,EAAYN,GAAO,IAAAO,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAT,KAAAO,IAClBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAT,KAAAS,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAb,KAAMC,KACDa,MAAQ,CACZC,SAAU,KACVC,OAAQ,EACRC,OAAQ,EACRC,OAAQ,GAETV,EAAKW,YAAcX,EAAKW,YAAYC,KAAjBX,OAAAY,EAAA,EAAAZ,CAAAD,IARDA,0EAWlB,ICpBcc,EDoBRC,GCpBQD,EDoBStB,KAAKC,MAAMuB,OCnBjBC,KAAKC,MAAMD,KAAKE,SAAWL,EAAIM,SDoBhD5B,KAAK6B,SAAS,SAAAC,GACb,MAAO,CACNf,SAAUQ,EACVP,OAAQc,EAAGd,OAAS,EACpBC,OAAQa,EAAGb,QAA2B,UAAjBM,EAAQlB,KAAmB,EAAG,GACnDa,OAAQY,EAAGZ,QAA2B,UAAjBK,EAAQlB,KAAmB,EAAG,0CAI1C0B,GACX/B,KAAKgC,4CAGL,OACCrC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACdH,EAAAC,EAAAC,cAAA,gCACCG,KAAKc,MAAMC,UAAYpB,EAAAC,EAAAC,cAACoC,EAAD,CAAM/B,KAAMF,KAAKc,MAAMC,WAC/CpB,EAAAC,EAAAC,cAAA,UAAQqC,QAASlC,KAAKmB,aAAtB,YACAxB,EAAAC,EAAAC,cAAA,mBACQG,KAAKc,MAAME,OADnB,2BACmDhB,KAAKc,MAAMG,OAD9D,cACiFjB,KAAKc,MAAMI,OAD5F,mBArCwBZ,aAAtBC,EACE4B,aAAe,CACrBX,MAAO,CACN,CAACnB,KAAM,QAASF,OAAQ,yDACxB,CAACE,KAAM,QAASF,OAAQ,0DAyCZI,QEpCA6B,0LAPd,OACCzC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAACwC,EAAD,cAJe/B,cCQEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d2f1acad.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './Coin.css';\n\nclass Coin extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"Coin\">\n\t\t\t\t<img src={this.props.info.imgSrc} alt={this.props.info.side} />\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Coin;\n\n","import React, { Component } from 'react'\nimport { choice } from \"./helpers\";\nimport Coin from \"./Coin\";\n\nclass CoinContainer extends Component {\n\tstatic defaultProps = {\n\t\tcoins: [\n\t\t\t{side: \"heads\", imgSrc: \"https://www.virtualcointoss.com/img/quarter_front.png\"},\n\t\t\t{side: 'tails', imgSrc: \"https://www.virtualcointoss.com/img/quarter_back.png\"}\n\t\t]\n\t};\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tcurrCoin: null,\n\t\t\tnFlips: 0,\n\t\t\tnHeads: 0,\n\t\t\tnTails: 0\n\t\t};\n\t\tthis.handleClick = this.handleClick.bind(this);\n\t}\n\tflipCoin() {\n\t\tconst newCoin = choice(this.props.coins);\n\t\tthis.setState(st => {\n\t\t\treturn {\n\t\t\t\tcurrCoin: newCoin,\n\t\t\t\tnFlips: st.nFlips + 1,\n\t\t\t\tnHeads: st.nHeads + (newCoin.side === \"heads\" ? 1: 0),\n\t\t\t\tnTails: st.nTails + (newCoin.side === \"tails\" ? 1: 0)\n\t\t\t};\n\t\t});\n\t}\n\thandleClick(e) {\n\t\tthis.flipCoin();\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"CoinContainer\">\n\t\t\t\t<h2>Let's flip a coin!</h2>\n\t\t\t\t{this.state.currCoin && <Coin info={this.state.currCoin} />}\n\t\t\t\t<button onClick={this.handleClick}>Flip Me!</button>\n\t\t\t\t<p>\n\t\t\t\tOut of {this.state.nFlips} flips, there have been {this.state.nHeads} Heads and {this.state.nTails} Tails!\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default CoinContainer;","\n\nfunction choice(arr) {\n\tlet randomIndex = Math.floor(Math.random() * arr.length);\n\treturn arr[randomIndex];\n}\n\nexport { choice };","import React, { Component } from 'react'\nimport CoinContainer from \"./CoinContainer\";\nimport './App.css';\n\nclass App extends Component {\n\trender() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<CoinContainer />\n\t\t</div>\n\t);\n\t}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}